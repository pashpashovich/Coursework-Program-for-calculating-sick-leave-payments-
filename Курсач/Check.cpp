#include "Check.h"

void checkChoice(int* x, int a, int b) { // функция проверки на допустимость вводимых значений в диапазоне от a до b
    while (true)
    {
        char st[10000]; // массив символов
        char prev = '\0'; // переменная для предыдущего символа
        int i = 0; // счётчик элементов массива символов
        while (true)
        {
            st[i] = _getch(); // ввод 1 символа
            if ((st[i] == 13) && i != 0) break; // завершить ввод строки, если нажат enter
            if (st[i] == 8 && i > 0) { // если бекспейс, то удалить предыдущий элемент
                cout << "\b";
                cout << " ";
                cout << "\b";
                i--;
                continue;
            }
            if (st[i] < 48 || st[i]>57) // если не цифра, то повторно вводить данный символ
                continue;
            if (st[i] == '0' && prev == '0' && i == 1) continue; // если два подряд 0 в начале записи числа, то повторно вводить данный символ
            cout << st[i]; // если всё ок, то выводим данный символ на экран
            prev = st[i]; // приравниваем данный символ к предыдущему
            i++; // переходим к следующему символу
        }
        st[i] = '\0'; // заканчиваем строку нуль-терминатором 
        if ((atoi(st)) >= a && (atoi(st)) <= b)
        {
            *x = atoi(st); // возвращаем преобразованную к типу int строку
            cout << endl;
            break;
        }
        else cout << "\nНеккоректный ввод! Попробуйте еще раз)" << endl;
    }
}


    double checkDouble()
    {
        char st[10000]; // массив символов
        int i = 0; // счётчик элементов массива символов
        char prev = '\0';  // переменная для предыдущего символа
        int commas = 0;  // переменная для кол-ва запятых 
        int eshki = 0; // переменная для кол-ва e 
        int minuses = 0; // переменная для кол-ва - 
        int numE = 0; // переменная для позиции ешки в числе
        while (true)
        {
            st[i] = _getch(); // ввод 1 символа
            if (i == 1 && st[i] == 13 && st[0] == '-') continue; // запретить ввод только одно '-'
            if (st[0] == '-' && st[1] == ',' && st[2] == 13) continue; // если -, , то запретить 
            if ((st[i] == 13) && i != 0) break; // завершить ввод строки, если нажат enter
            if (st[i] == 8 && i > 0) { // если бекспейс, то удалить предыдущий элемент
                cout << "\b";
                cout << " ";
                cout << "\b";
                i--;
                continue;
            }
            if (!(isdigit((unsigned char)st[i]) || st[i] == ',' || st[i] == 'e' || st[i] == 'E' || st[i] == '-')) // если не цифра, не ',', не 'e', не '-', то повторно вводить данный символ
                continue;
            if (st[0] == '-' && (st[1] == 'e' || st[1] == 'E' || st[1] == '0')) continue; // если -е  или -0, то запретить 
            if (st[i] == ',' && commas == 0) // если запятая первая по счёту, то можно
                commas++;
            else // если не первая, то повторно вводить данный символ
                if (st[i] == ',') continue;
            if ((st[i] == 'e' || st[i] == 'E') && eshki == 0 && i != 0) // если e первая по счёту и не на первом месте, то нормально
            {
                numE = -1; // позиция ешки запоминаем
                eshki++; // добавляем кол-во ешек
            }
            else // в других случаях повторно вводим
                if (st[i] == 'e' || st[i] == 'E') continue;

            if (!(i > 0 && st[i] == '-' && (prev == 'e' || prev == 'E'))) // если '-' после e, то ок
            {
                if (st[i] == '-' && i != 0) continue; // если '-' не на первом месте и не после е, то повторно вводить данный символ
            }
            if (st[i] == '0' && prev == '0' && numE == 1) continue; // если два подряд 0 в начале записи числа или после е, то повторно вводить данный символ
            if (numE == 2 && st[i] == '0' && prev == '0' && st[i - 2] == '-') continue; // если два подряд 0 в начале записи числа перед '-' или после е, то повторно вводить данный символ
            prev = st[i]; // приравниваем данный символ к предыдущему
            cout << st[i]; // если всё ок, то выводим данный символ на экран
            numE++; // увеличиваем позицию ешки
            i++; // переходим к следующему символу
        }
        st[i] = '\0'; // заканчиваем строку нуль-терминатором 
        return atof(st); // возвращаем преобразованную к типу double строку
    }
